name: "Deploy to production"

on:
  push:
    branches: [master]

jobs:
  delivery-to-host:
    name: Delivery to host
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      - name: Cache node_modules
        id: cache_node_modules
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install packages
        run: npm install
        if: ${{steps.cache_node_modules.outputs.cache-hit != 'true' }}

      - name: Run build code
        run: |
          npm run k8s:generator:build
          npm run build:prod

      - name: Run generate K8S files
        run: |
          export $(cat ./env/prod.env)
          export HOST=${{ secrets.HOST }}
          export ROOT_POSTGRES_USER=${{ secrets.ROOT_POSTGRES_USER }}
          export ROOT_POSTGRES_PASSWORD=${{ secrets.ROOT_POSTGRES_PASSWORD }}
          export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          node ./k8s/generators/generator.js

      - name: Build and push Docker images (frontend)
        uses: docker/build-push-action@v1
        if: ${{ github.event_name == 'push' }}
        with:
          dockerfile: docker/__Dockerfile/Dockerfile.site15-frontend
          username: endykaufman
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          registry: docker.io
          repository: site15/site15-frontend
          tags: latest

      - name: Build and push Docker images (backend)
        uses: docker/build-push-action@v1
        if: ${{ github.event_name == 'push' }}
        with:
          dockerfile: docker/__Dockerfile/Dockerfile.site15-backend
          username: endykaufman
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          registry: docker.io
          repository: site15/site15-backend
          tags: latest

      - name: Copy K8S files to host
        uses: appleboy/scp-action@master
        if: ${{ github.event_name == 'push' }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          source: "k8s,env"
          target: "vps/site15.ru"
          rm: true

  apply-k8s-changes:
    name: Apply changes
    needs: [delivery-to-host]
    runs-on: ubuntu-latest

    steps:
      - name: Apply to K8S
        uses: appleboy/ssh-action@master
        if: ${{ github.event_name == 'push' }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            cd ./vps/site15.ru
            export $(cat ./env/prod.env)
            export HOST=${{ secrets.HOST }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            ./k8s/apply.sh

  migrate-database:
    name: Apply migrations
    needs: [delivery-to-host, apply-k8s-changes]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      - name: Cache node_modules
        id: cache_node_modules
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package.json') }}

      - name: Install packages
        run: npm install
        if: ${{steps.cache_node_modules.outputs.cache-hit != 'true' }}

      - name: Open database in K8S for internet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            cd ./vps/site15.ru
            export $(cat ./env/prod.env)
            ./k8s/open-database.sh

      - name: Apply migrations on host
        run: npm run migrate
        if: ${{ github.event_name == 'push' && steps.cache_migrations.outputs.cache-hit != 'true' }}
        env:
          POSTGRES_URL: postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.HOST }}:${{ secrets.POSTGRES_PORT }}/site15?schema=public
          REDIS_URL: redis://${{ secrets.HOST }}:32379

      - name: Close database in K8S for internet
        uses: appleboy/ssh-action@master
        if: ${{ github.event_name == 'push' && steps.cache_migrations.outputs.cache-hit != 'true' }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            cd ./vps/site15.ru
            export $(cat ./env/prod.env)
            ./k8s/close-database.sh

      - name: Apply to K8S if migrations changed
        uses: appleboy/ssh-action@master
        if: ${{ github.event_name == 'push' && steps.cache_migrations.outputs.cache-hit != 'true'}}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            cd ./vps/site15.ru
            export $(cat ./env/prod.env)
            export HOST=${{ secrets.HOST }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            ./k8s/apply.sh
